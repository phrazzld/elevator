// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Golden Test Suite - Phase 1 Prompt Transformations > Prompt Transformation Quality Validation > should maintain consistent system prompt structure across all inputs > canonical_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > Regression Detection > should detect changes in prompt structure immediately > regression_detection_structure 1`] = `
{
  "hasExamples": true,
  "hasInstructions": true,
  "hasRole": true,
  "requestStructure": {
    "contentsLength": 2,
    "hasSystemPrompt": true,
    "hasUserPrompt": true,
  },
  "systemPromptHash": "-35d90b5b",
  "systemPromptLength": 2156,
  "userPrompt": "regression test input",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: content_creation > content_creation_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"write about AI"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: content_creation > content_creation_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: data_analysis_task > data_analysis_task_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"analyze this data"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: data_analysis_task > data_analysis_task_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: design_request > design_request_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"create a design"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: design_request > design_request_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: empty_input > empty_input_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":""}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: empty_input > empty_input_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: long_detailed_request > long_detailed_request_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"I need help creating a comprehensive testing strategy for my React application that includes unit tests, integration tests, and end-to-end tests, with proper mocking strategies and coverage reporting"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: long_detailed_request > long_detailed_request_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: performance_optimization > performance_optimization_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"make my app faster"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: performance_optimization > performance_optimization_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: simple_code_request > simple_code_request_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"help with my code"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: simple_code_request > simple_code_request_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: single_word_request > single_word_request_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"refactor"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: single_word_request > single_word_request_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: special_characters_unicode > special_characters_unicode_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"Help me debug this: console.log('Hello 🌟 World'); // Why doesn't this work?"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: special_characters_unicode > special_characters_unicode_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: vague_bug_fix > vague_bug_fix_full_request 1`] = `
{
  "body": "{"contents":[{"role":"user","parts":[{"text":"<role>Expert prompt engineer specializing in technical communication</role>\\n\\n<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>\\n\\n<instructions>\\n1. Add specific context and measurable outcomes\\n2. Replace vague terms with precise technical language\\n3. Structure with clear sections and constraints\\n4. Include format specifications when beneficial\\n5. Specify success criteria and validation methods\\n</instructions>\\n\\n<examples>\\nInput: \\"help with my code\\"\\nOutput: \\"Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets.\\"\\n\\nInput: \\"write about AI\\"\\nOutput: \\"Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies.\\"\\n\\nInput: \\"analyze this data\\"\\nOutput: \\"Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices.\\"\\n\\nInput: \\"fix my bug\\"\\nOutput: \\"Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases.\\"\\n\\nInput: \\"create a design\\"\\nOutput: \\"Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation.\\"\\n</examples>\\n\\n<output_constraints>\\nOutput ONLY the transformed prompt. No explanations, headers, or meta-commentary.\\n</output_constraints>\\n\\nTransform this request:"}]},{"role":"user","parts":[{"text":"fix my bug"}]}]}",
  "headers": {
    "Content-Type": "application/json",
    "x-goog-api-key": "test-golden-key",
  },
  "method": "POST",
  "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
}
`;

exports[`Golden Test Suite - Phase 1 Prompt Transformations > should produce consistent prompt transformation for: vague_bug_fix > vague_bug_fix_system_prompt 1`] = `
"<role>Expert prompt engineer specializing in technical communication</role>

<context>Transform requests using proven CRISP structure (Context, Role, Instructions, Specifics, Parameters)</context>

<instructions>
1. Add specific context and measurable outcomes
2. Replace vague terms with precise technical language
3. Structure with clear sections and constraints
4. Include format specifications when beneficial
5. Specify success criteria and validation methods
</instructions>

<examples>
Input: "help with my code"
Output: "Review this [LANGUAGE] codebase for performance bottlenecks. Focus on: 1) Inefficient algorithms (O(n²)+), 2) Memory leaks, 3) Unnecessary operations. Provide specific line numbers and optimization suggestions. Format: Markdown with code snippets."

Input: "write about AI"
Output: "Create a 1200-word technical analysis of AI applications in [DOMAIN]. Structure: Executive summary (200w), Current state (400w), Emerging trends (400w), Implementation considerations (200w). Target audience: Technical decision-makers. Include 3+ case studies."

Input: "analyze this data"
Output: "Perform statistical analysis on [DATA_TYPE] dataset. Methodology: 1) Descriptive statistics with outlier detection, 2) Trend analysis using [METHOD], 3) Correlation matrix for key variables. Deliverables: Executive summary, detailed findings with visualizations, recommendations with confidence intervals. Format: PDF report with appendices."

Input: "fix my bug"
Output: "Debug [ERROR_TYPE] in [COMPONENT] (line X). Reproduce steps: [STEPS]. Expected vs actual behavior: [COMPARISON]. Provide: 1) Root cause analysis, 2) Fix with explanation, 3) Prevention strategy, 4) Test cases."

Input: "create a design"
Output: "Design [ARTIFACT] for [AUDIENCE]. Requirements: [SPECIFICATIONS]. Constraints: [TECHNICAL/BUSINESS_LIMITS]. Deliverables: 1) Wireframes/mockups, 2) Technical specifications, 3) Implementation timeline, 4) Success metrics. Format: Design system with documentation."
</examples>

<output_constraints>
Output ONLY the transformed prompt. No explanations, headers, or meta-commentary.
</output_constraints>

Transform this request:"
`;
